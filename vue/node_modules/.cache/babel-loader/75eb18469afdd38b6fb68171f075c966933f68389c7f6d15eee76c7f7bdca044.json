{"ast":null,"code":"import _regeneratorRuntime from \"C:/workspaces/Movie_Trend_Explorer/vue/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/workspaces/Movie_Trend_Explorer/vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport axios from 'axios';\nimport NoPoster from '@/assets/no-poster.svg';\nexport default {\n  name: 'Search',\n  data: function data() {\n    return {\n      movies: [],\n      defaultPoster: NoPoster\n    };\n  },\n  watch: {\n    '$route.query.query': {\n      immediate: true,\n      handler: function handler(newQuery) {\n        if (newQuery) {\n          this.searchMovies(newQuery);\n        }\n      }\n    }\n  },\n  methods: {\n    searchMovies: function searchMovies(query) {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get(\"http://localhost:8080/api/movies/search?query=\".concat(encodeURIComponent(query)));\n            case 3:\n              response = _context.sent;\n              if (response.data && Array.isArray(response.data.results)) {\n                _this.movies = response.data.results;\n              }\n              _context.next = 10;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error searching movies:', _context.t0);\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 7]]);\n      }))();\n    },\n    getImageUrl: function getImageUrl(path) {\n      if (!path) return this.defaultPoster;\n      if (path.startsWith('http')) return path;\n      return \"https://image.tmdb.org/t/p/w500\".concat(path);\n    },\n    handleImageError: function handleImageError(e) {\n      e.target.src = this.defaultPoster;\n    },\n    formatDate: function formatDate(date) {\n      if (!date) return '';\n      return new Date(date).toLocaleDateString('ko-KR', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","NoPoster","name","data","movies","defaultPoster","watch","immediate","handler","newQuery","searchMovies","methods","query","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","get","concat","encodeURIComponent","sent","Array","isArray","results","t0","console","error","stop","getImageUrl","path","startsWith","handleImageError","e","target","src","formatDate","date","Date","toLocaleDateString","year","month","day"],"sources":["src/views/Search.vue"],"sourcesContent":["<template>\r\n  <div class=\"search\">\r\n    <div class=\"container\">\r\n      <h1 class=\"mb-4\">검색 결과: \"{{ $route.query.query }}\"</h1>\r\n      <div class=\"row\">\r\n        <div v-for=\"movie in movies\" :key=\"movie.id\" class=\"col-md-3 mb-4\">\r\n          <router-link :to=\"{ name: 'MovieDetail', params: { id: movie.id }}\" class=\"movie-card\">\r\n            <img \r\n              :src=\"getImageUrl(movie.posterPath)\" \r\n              :alt=\"movie.title\"\r\n              class=\"movie-poster\"\r\n              @error=\"handleImageError\"\r\n            >\r\n            <div class=\"movie-info\">\r\n              <h3 class=\"movie-title\">{{ movie.title }}</h3>\r\n              <p class=\"movie-date\">{{ formatDate(movie.releaseDate) }}</p>\r\n              <div class=\"movie-rating\">\r\n                <span class=\"rating\">★ {{ movie.voteAverage?.toFixed(1) || 'N/A' }}</span>\r\n                <span class=\"vote-count\">({{ movie.voteCount || 0 }})</span>\r\n              </div>\r\n            </div>\r\n          </router-link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport NoPoster from '@/assets/no-poster.svg'\r\n\r\nexport default {\r\n  name: 'Search',\r\n  data() {\r\n    return {\r\n      movies: [],\r\n      defaultPoster: NoPoster\r\n    }\r\n  },\r\n  watch: {\r\n    '$route.query.query': {\r\n      immediate: true,\r\n      handler(newQuery) {\r\n        if (newQuery) {\r\n          this.searchMovies(newQuery)\r\n        }\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    async searchMovies(query) {\r\n      try {\r\n        const response = await axios.get(`http://localhost:8080/api/movies/search?query=${encodeURIComponent(query)}`)\r\n        if (response.data && Array.isArray(response.data.results)) {\r\n          this.movies = response.data.results\r\n        }\r\n      } catch (error) {\r\n        console.error('Error searching movies:', error)\r\n      }\r\n    },\r\n    getImageUrl(path) {\r\n      if (!path) return this.defaultPoster\r\n      if (path.startsWith('http')) return path\r\n      return `https://image.tmdb.org/t/p/w500${path}`\r\n    },\r\n    handleImageError(e) {\r\n      e.target.src = this.defaultPoster\r\n    },\r\n    formatDate(date) {\r\n      if (!date) return ''\r\n      return new Date(date).toLocaleDateString('ko-KR', {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric'\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.movie-card {\r\n  display: block;\r\n  text-decoration: none;\r\n  color: inherit;\r\n  background: white;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  transition: transform 0.2s;\r\n  height: 100%;\r\n}\r\n\r\n.movie-card:hover {\r\n  transform: translateY(-5px);\r\n}\r\n\r\n.movie-poster {\r\n  width: 100%;\r\n  height: 360px;\r\n  object-fit: cover;\r\n}\r\n\r\n.movie-info {\r\n  padding: 1rem;\r\n}\r\n\r\n.movie-title {\r\n  font-size: 1rem;\r\n  margin-bottom: 0.5rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.movie-date {\r\n  color: #666;\r\n  font-size: 0.9rem;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.movie-rating {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.rating {\r\n  color: #f5c518;\r\n  font-weight: 600;\r\n}\r\n\r\n.vote-count {\r\n  color: #666;\r\n  font-size: 0.9rem;\r\n}\r\n</style> "],"mappings":";;;;;AA6BA,OAAAA,KAAA;AACA,OAAAC,QAAA;AAEA;EACAC,IAAA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,MAAA;MACAC,aAAA,EAAAJ;IACA;EACA;EACAK,KAAA;IACA;MACAC,SAAA;MACAC,OAAA,WAAAA,QAAAC,QAAA;QACA,IAAAA,QAAA;UACA,KAAAC,YAAA,CAAAD,QAAA;QACA;MACA;IACA;EACA;EACAE,OAAA;IACAD,YAAA,WAAAA,aAAAE,KAAA;MAAA,IAAAC,KAAA;MAAA,OAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,QAAA;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAEAvB,KAAA,CAAAwB,GAAA,kDAAAC,MAAA,CAAAC,kBAAA,CAAAd,KAAA;YAAA;cAAAM,QAAA,GAAAG,QAAA,CAAAM,IAAA;cACA,IAAAT,QAAA,CAAAf,IAAA,IAAAyB,KAAA,CAAAC,OAAA,CAAAX,QAAA,CAAAf,IAAA,CAAA2B,OAAA;gBACAjB,KAAA,CAAAT,MAAA,GAAAc,QAAA,CAAAf,IAAA,CAAA2B,OAAA;cACA;cAAAT,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAU,EAAA,GAAAV,QAAA;cAEAW,OAAA,CAAAC,KAAA,4BAAAZ,QAAA,CAAAU,EAAA;YAAA;YAAA;cAAA,OAAAV,QAAA,CAAAa,IAAA;UAAA;QAAA,GAAAjB,OAAA;MAAA;IAEA;IACAkB,WAAA,WAAAA,YAAAC,IAAA;MACA,KAAAA,IAAA,cAAA/B,aAAA;MACA,IAAA+B,IAAA,CAAAC,UAAA,iBAAAD,IAAA;MACA,yCAAAX,MAAA,CAAAW,IAAA;IACA;IACAE,gBAAA,WAAAA,iBAAAC,CAAA;MACAA,CAAA,CAAAC,MAAA,CAAAC,GAAA,QAAApC,aAAA;IACA;IACAqC,UAAA,WAAAA,WAAAC,IAAA;MACA,KAAAA,IAAA;MACA,WAAAC,IAAA,CAAAD,IAAA,EAAAE,kBAAA;QACAC,IAAA;QACAC,KAAA;QACAC,GAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}