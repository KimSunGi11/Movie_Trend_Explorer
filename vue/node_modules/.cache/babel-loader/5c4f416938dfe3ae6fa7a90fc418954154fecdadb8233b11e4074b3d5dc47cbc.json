{"ast":null,"code":"import _regeneratorRuntime from \"C:/workspaces/Movie_Trend_Explorer/vue/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/workspaces/Movie_Trend_Explorer/vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport axios from 'axios';\nexport default {\n  name: 'MovieList',\n  data: function data() {\n    return {\n      movies: []\n    };\n  },\n  created: function created() {\n    this.fetchMovies();\n  },\n  methods: {\n    fetchMovies: function fetchMovies() {\n      var _this = this;\n      return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios.get('http://localhost:8080/api/movies/trending');\n            case 3:\n              response = _context.sent;\n              if (response.data && Array.isArray(response.data.results)) {\n                _this.movies = response.data.results.map(function (movie) {\n                  return {\n                    id: movie.id,\n                    title: movie.title,\n                    overview: movie.overview || '',\n                    posterPath: movie.posterPath,\n                    releaseDate: movie.releaseDate,\n                    voteAverage: movie.voteAverage,\n                    voteCount: movie.voteCount,\n                    popularity: movie.popularity\n                  };\n                });\n              } else {\n                console.error('Invalid response format:', response.data);\n              }\n              _context.next = 10;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n              console.error('Error fetching movies:', _context.t0);\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 7]]);\n      }))();\n    },\n    getImageUrl: function getImageUrl(path) {\n      return \"https://image.tmdb.org/t/p/w500\".concat(path);\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","movies","created","fetchMovies","methods","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","get","sent","Array","isArray","results","map","movie","id","title","overview","posterPath","releaseDate","voteAverage","voteCount","popularity","console","error","t0","stop","getImageUrl","path","concat"],"sources":["src/views/Movies.vue"],"sourcesContent":["<template>\n  <div class=\"movies\">\n    <h1>Trending Movies</h1>\n    <div class=\"row\">\n      <div v-for=\"movie in movies\" :key=\"movie.id\" class=\"col-md-4 mb-4\">\n        <div class=\"card\">\n          <img :src=\"getImageUrl(movie.posterPath)\" class=\"card-img-top\" :alt=\"movie.title\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">{{ movie.title }}</h5>\n            <p class=\"card-text\">{{ movie.overview.substring(0, 150) }}...</p>\n            <router-link :to=\"'/movie/' + movie.id\" class=\"btn btn-primary\">View Details</router-link>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  name: 'MovieList',\n  data() {\n    return {\n      movies: []\n    }\n  },\n  created() {\n    this.fetchMovies()\n  },\n  methods: {\n    async fetchMovies() {\n      try {\n        const response = await axios.get('http://localhost:8080/api/movies/trending')\n        if (response.data && Array.isArray(response.data.results)) {\n          this.movies = response.data.results.map(movie => ({\n            id: movie.id,\n            title: movie.title,\n            overview: movie.overview || '',\n            posterPath: movie.posterPath,\n            releaseDate: movie.releaseDate,\n            voteAverage: movie.voteAverage,\n            voteCount: movie.voteCount,\n            popularity: movie.popularity\n          }))\n        } else {\n          console.error('Invalid response format:', response.data)\n        }\n      } catch (error) {\n        console.error('Error fetching movies:', error)\n      }\n    },\n    getImageUrl(path) {\n      return `https://image.tmdb.org/t/p/w500${path}`\n    }\n  }\n}\n</script>\n\n<style scoped>\n.card-img-top {\n  height: 400px;\n  object-fit: cover;\n}\n</style> "],"mappings":";;;;;;;AAmBA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,MAAA;IACA;EACA;EACAC,OAAA,WAAAA,QAAA;IACA,KAAAC,WAAA;EACA;EACAC,OAAA;IACAD,WAAA,WAAAA,YAAA;MAAA,IAAAE,KAAA;MAAA,OAAAC,iBAAA,cAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,QAAA;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAE,IAAA;cAAA,OAEAjB,KAAA,CAAAkB,GAAA;YAAA;cAAAN,QAAA,GAAAG,QAAA,CAAAI,IAAA;cACA,IAAAP,QAAA,CAAAV,IAAA,IAAAkB,KAAA,CAAAC,OAAA,CAAAT,QAAA,CAAAV,IAAA,CAAAoB,OAAA;gBACAf,KAAA,CAAAJ,MAAA,GAAAS,QAAA,CAAAV,IAAA,CAAAoB,OAAA,CAAAC,GAAA,WAAAC,KAAA;kBAAA;oBACAC,EAAA,EAAAD,KAAA,CAAAC,EAAA;oBACAC,KAAA,EAAAF,KAAA,CAAAE,KAAA;oBACAC,QAAA,EAAAH,KAAA,CAAAG,QAAA;oBACAC,UAAA,EAAAJ,KAAA,CAAAI,UAAA;oBACAC,WAAA,EAAAL,KAAA,CAAAK,WAAA;oBACAC,WAAA,EAAAN,KAAA,CAAAM,WAAA;oBACAC,SAAA,EAAAP,KAAA,CAAAO,SAAA;oBACAC,UAAA,EAAAR,KAAA,CAAAQ;kBACA;gBAAA;cACA;gBACAC,OAAA,CAAAC,KAAA,6BAAAtB,QAAA,CAAAV,IAAA;cACA;cAAAa,QAAA,CAAAE,IAAA;cAAA;YAAA;cAAAF,QAAA,CAAAC,IAAA;cAAAD,QAAA,CAAAoB,EAAA,GAAApB,QAAA;cAEAkB,OAAA,CAAAC,KAAA,2BAAAnB,QAAA,CAAAoB,EAAA;YAAA;YAAA;cAAA,OAAApB,QAAA,CAAAqB,IAAA;UAAA;QAAA,GAAAzB,OAAA;MAAA;IAEA;IACA0B,WAAA,WAAAA,YAAAC,IAAA;MACA,yCAAAC,MAAA,CAAAD,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}