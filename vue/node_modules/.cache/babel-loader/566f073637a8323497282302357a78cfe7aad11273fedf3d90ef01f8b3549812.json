{"ast":null,"code":"import { VExpandTransition } from '../transitions'; // Mixins\n\nimport Bootable from '../../mixins/bootable';\nimport Colorable from '../../mixins/colorable';\nimport { inject as RegistrableInject } from '../../mixins/registrable'; // Utilities\n\nimport { getSlot } from '../../util/helpers';\nimport mixins from '../../util/mixins';\nvar baseMixins = mixins(Bootable, Colorable, RegistrableInject('expansionPanel', 'v-expansion-panel-content', 'v-expansion-panel'));\n/* @vue/component */\n\nexport default baseMixins.extend().extend({\n  name: 'v-expansion-panel-content',\n  data: function data() {\n    return {\n      isActive: false\n    };\n  },\n  computed: {\n    parentIsActive: function parentIsActive() {\n      return this.expansionPanel.isActive;\n    }\n  },\n  watch: {\n    parentIsActive: {\n      immediate: true,\n      handler: function handler(val, oldVal) {\n        var _this = this;\n        if (val) this.isBooted = true;\n        if (oldVal == null) this.isActive = val;else this.$nextTick(function () {\n          return _this.isActive = val;\n        });\n      }\n    }\n  },\n  created: function created() {\n    this.expansionPanel.registerContent(this);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.expansionPanel.unregisterContent();\n  },\n  render: function render(h) {\n    var _this2 = this;\n    return h(VExpandTransition, this.showLazyContent(function () {\n      return [h('div', _this2.setBackgroundColor(_this2.color, {\n        staticClass: 'v-expansion-panel-content',\n        directives: [{\n          name: 'show',\n          value: _this2.isActive\n        }]\n      }), [h('div', {\n        \"class\": 'v-expansion-panel-content__wrap'\n      }, getSlot(_this2, 'default', {\n        open: _this2.isActive\n      }))])];\n    }));\n  }\n});","map":{"version":3,"names":["VExpandTransition","Bootable","Colorable","inject","RegistrableInject","getSlot","mixins","baseMixins","extend","name","data","isActive","computed","parentIsActive","expansionPanel","watch","immediate","handler","val","oldVal","_this","isBooted","$nextTick","created","registerContent","beforeDestroy","unregisterContent","render","h","_this2","showLazyContent","setBackgroundColor","color","staticClass","directives","value","open"],"sources":["../../../src/components/VExpansionPanel/VExpansionPanelContent.ts"],"sourcesContent":["// Components\nimport VExpansionPanel from './VExpansionPanel'\nimport { VExpandTransition } from '../transitions'\n\n// Mixins\nimport Bootable from '../../mixins/bootable'\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Bootable,\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-content', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-content',\n\n  data: () => ({\n    isActive: false,\n  }),\n\n  computed: {\n    parentIsActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n  },\n\n  watch: {\n    parentIsActive: {\n      immediate: true,\n      handler (val, oldVal) {\n        if (val) this.isBooted = true\n\n        if (oldVal == null) this.isActive = val\n        else this.$nextTick(() => this.isActive = val)\n      },\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerContent(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterContent()\n  },\n\n  render (h): VNode {\n    return h(VExpandTransition, this.showLazyContent(() => [\n      h('div', this.setBackgroundColor(this.color, {\n        staticClass: 'v-expansion-panel-content',\n        directives: [{\n          name: 'show',\n          value: this.isActive,\n        }],\n      }), [\n        h('div', { class: 'v-expansion-panel-content__wrap' }, getSlot(this, 'default', { open: this.isActive })),\n      ]),\n    ]))\n  },\n})\n"],"mappings":"AAEA,SAASA,iBAAT,QAAkC,gBAAlC,C,CAEA;;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,MAAM,IAAIC,iBAAnB,QAA4C,0BAA5C,C,CAEA;;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAOC,MAAP,MAAmC,mBAAnC;AAKA,IAAMC,UAAU,GAAGD,MAAM,CACvBL,QADuB,EAEvBC,SAFuB,EAGvBE,iBAAiB,CAAwC,gBAAxC,EAA0D,2BAA1D,EAAuF,mBAAvF,CAHM,CAAzB;AAUA;;AACA,eAAeG,UAAU,CAACC,MAAX,GAA6BA,MAA7B,CAAoC;EACjDC,IAAI,EAAE,2BAD2C;EAGjDC,IAAI,EAAE,SAANA,IAAIA,CAAA;IAAA,OAAS;MACXC,QAAQ,EAAE;IADC,CAAP;EAAA,CAH2C;EAOjDC,QAAQ,EAAE;IACRC,cAAc,WAAdA,cAAcA,CAAA;MACZ,OAAO,KAAKC,cAAL,CAAoBH,QAA3B;IACD;EAHO,CAPuC;EAajDI,KAAK,EAAE;IACLF,cAAc,EAAE;MACdG,SAAS,EAAE,IADG;MAEdC,OAAO,WAAPA,OAAOA,CAAEC,GAAF,EAAOC,MAAP,EAAa;QAAA,IAAAC,KAAA;QAClB,IAAIF,GAAJ,EAAS,KAAKG,QAAL,GAAgB,IAAhB;QAET,IAAIF,MAAM,IAAI,IAAd,EAAoB,KAAKR,QAAL,GAAgBO,GAAhB,CAApB,KACK,KAAKI,SAAL,CAAe;UAAA,OAAMF,KAAA,CAAKT,QAAL,GAAgBO,GAArC;QAAA;MACN;IAPa;EADX,CAb0C;EAyBjDK,OAAO,WAAPA,OAAOA,CAAA;IACL,KAAKT,cAAL,CAAoBU,eAApB,CAAoC,IAApC;EACD,CA3BgD;EA6BjDC,aAAa,WAAbA,aAAaA,CAAA;IACX,KAAKX,cAAL,CAAoBY,iBAApB;EACD,CA/BgD;EAiCjDC,MAAM,WAANA,MAAMA,CAAEC,CAAF,EAAG;IAAA,IAAAC,MAAA;IACP,OAAOD,CAAC,CAAC5B,iBAAD,EAAoB,KAAK8B,eAAL,CAAqB;MAAA,OAAM,CACrDF,CAAC,CAAC,KAAD,EAAQC,MAAA,CAAKE,kBAAL,CAAwBF,MAAA,CAAKG,KAA7B,EAAoC;QAC3CC,WAAW,EAAE,2BAD8B;QAE3CC,UAAU,EAAE,CAAC;UACXzB,IAAI,EAAE,MADK;UAEX0B,KAAK,EAAEN,MAAA,CAAKlB;QAFD,CAAD;MAF+B,CAApC,CAAR,EAMG,CACFiB,CAAC,CAAC,KAAD,EAAQ;QAAE,SAAO;MAAT,CAAR,EAAsDvB,OAAO,CAACwB,MAAD,EAAO,SAAP,EAAkB;QAAEO,IAAI,EAAEP,MAAA,CAAKlB;MAAb,CAAlB,CAA7D,CADC,CANH,CADoD,CAA3B;IAAA,EAApB,CAAR;EAWD;AA7CgD,CAApC,CAAf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}